// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppArmadillo.h>
#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// shumway_EM
List shumway_EM(arma::mat z, arma::vec a0, arma::vec P0, arma::vec TT, arma::vec Q, arma::vec H, double EM_toll, int EM_maxit, int verbose);
RcppExport SEXP _compStateSpace_shumway_EM(SEXP zSEXP, SEXP a0SEXP, SEXP P0SEXP, SEXP TTSEXP, SEXP QSEXP, SEXP HSEXP, SEXP EM_tollSEXP, SEXP EM_maxitSEXP, SEXP verboseSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type z(zSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type a0(a0SEXP);
    Rcpp::traits::input_parameter< arma::vec >::type P0(P0SEXP);
    Rcpp::traits::input_parameter< arma::vec >::type TT(TTSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type Q(QSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type H(HSEXP);
    Rcpp::traits::input_parameter< double >::type EM_toll(EM_tollSEXP);
    Rcpp::traits::input_parameter< int >::type EM_maxit(EM_maxitSEXP);
    Rcpp::traits::input_parameter< int >::type verbose(verboseSEXP);
    rcpp_result_gen = Rcpp::wrap(shumway_EM(z, a0, P0, TT, Q, H, EM_toll, EM_maxit, verbose));
    return rcpp_result_gen;
END_RCPP
}
// shumway_EM_list
List shumway_EM_list(const List z_list, const List a0_l, const List P0_l, arma::vec TT, arma::vec Q, arma::vec H, arma::vec probs, double EM_toll, int EM_maxit, int verbose);
RcppExport SEXP _compStateSpace_shumway_EM_list(SEXP z_listSEXP, SEXP a0_lSEXP, SEXP P0_lSEXP, SEXP TTSEXP, SEXP QSEXP, SEXP HSEXP, SEXP probsSEXP, SEXP EM_tollSEXP, SEXP EM_maxitSEXP, SEXP verboseSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const List >::type z_list(z_listSEXP);
    Rcpp::traits::input_parameter< const List >::type a0_l(a0_lSEXP);
    Rcpp::traits::input_parameter< const List >::type P0_l(P0_lSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type TT(TTSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type Q(QSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type H(HSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type probs(probsSEXP);
    Rcpp::traits::input_parameter< double >::type EM_toll(EM_tollSEXP);
    Rcpp::traits::input_parameter< int >::type EM_maxit(EM_maxitSEXP);
    Rcpp::traits::input_parameter< int >::type verbose(verboseSEXP);
    rcpp_result_gen = Rcpp::wrap(shumway_EM_list(z_list, a0_l, P0_l, TT, Q, H, probs, EM_toll, EM_maxit, verbose));
    return rcpp_result_gen;
END_RCPP
}
// k_filter
List k_filter(const arma::mat z, const arma::vec a0, const arma::vec P0, const arma::vec TT, const arma::vec Q, const arma::vec H);
RcppExport SEXP _compStateSpace_k_filter(SEXP zSEXP, SEXP a0SEXP, SEXP P0SEXP, SEXP TTSEXP, SEXP QSEXP, SEXP HSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat >::type z(zSEXP);
    Rcpp::traits::input_parameter< const arma::vec >::type a0(a0SEXP);
    Rcpp::traits::input_parameter< const arma::vec >::type P0(P0SEXP);
    Rcpp::traits::input_parameter< const arma::vec >::type TT(TTSEXP);
    Rcpp::traits::input_parameter< const arma::vec >::type Q(QSEXP);
    Rcpp::traits::input_parameter< const arma::vec >::type H(HSEXP);
    rcpp_result_gen = Rcpp::wrap(k_filter(z, a0, P0, TT, Q, H));
    return rcpp_result_gen;
END_RCPP
}
// k_smoother
List k_smoother(const List filtered, const arma::vec TT);
RcppExport SEXP _compStateSpace_k_smoother(SEXP filteredSEXP, SEXP TTSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const List >::type filtered(filteredSEXP);
    Rcpp::traits::input_parameter< const arma::vec >::type TT(TTSEXP);
    rcpp_result_gen = Rcpp::wrap(k_smoother(filtered, TT));
    return rcpp_result_gen;
END_RCPP
}
// mb_clust
List mb_clust(const List z_list, const List a0_l, const List P0_l, const List g_T, const List g_Q, const List g_H, const List x_list, const List g_gamma, int clust_maxit, double clust_toll, int verbose);
RcppExport SEXP _compStateSpace_mb_clust(SEXP z_listSEXP, SEXP a0_lSEXP, SEXP P0_lSEXP, SEXP g_TSEXP, SEXP g_QSEXP, SEXP g_HSEXP, SEXP x_listSEXP, SEXP g_gammaSEXP, SEXP clust_maxitSEXP, SEXP clust_tollSEXP, SEXP verboseSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const List >::type z_list(z_listSEXP);
    Rcpp::traits::input_parameter< const List >::type a0_l(a0_lSEXP);
    Rcpp::traits::input_parameter< const List >::type P0_l(P0_lSEXP);
    Rcpp::traits::input_parameter< const List >::type g_T(g_TSEXP);
    Rcpp::traits::input_parameter< const List >::type g_Q(g_QSEXP);
    Rcpp::traits::input_parameter< const List >::type g_H(g_HSEXP);
    Rcpp::traits::input_parameter< const List >::type x_list(x_listSEXP);
    Rcpp::traits::input_parameter< const List >::type g_gamma(g_gammaSEXP);
    Rcpp::traits::input_parameter< int >::type clust_maxit(clust_maxitSEXP);
    Rcpp::traits::input_parameter< double >::type clust_toll(clust_tollSEXP);
    Rcpp::traits::input_parameter< int >::type verbose(verboseSEXP);
    rcpp_result_gen = Rcpp::wrap(mb_clust(z_list, a0_l, P0_l, g_T, g_Q, g_H, x_list, g_gamma, clust_maxit, clust_toll, verbose));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_compStateSpace_shumway_EM", (DL_FUNC) &_compStateSpace_shumway_EM, 9},
    {"_compStateSpace_shumway_EM_list", (DL_FUNC) &_compStateSpace_shumway_EM_list, 10},
    {"_compStateSpace_k_filter", (DL_FUNC) &_compStateSpace_k_filter, 6},
    {"_compStateSpace_k_smoother", (DL_FUNC) &_compStateSpace_k_smoother, 2},
    {"_compStateSpace_mb_clust", (DL_FUNC) &_compStateSpace_mb_clust, 11},
    {NULL, NULL, 0}
};

RcppExport void R_init_compStateSpace(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
